
# Standard options we will include in our services.
x-base-service: &base-service
  # Include the .env file for environment variables (if it exists).
  env_file:
  - path: .env
    required: false

  # Make sure the container runs as the same user as the host to avoid
  # permission issues with mounted volumes.
  user: "${MY_UID}:${MY_GID}"

  # Docker allocates 64MB of shared memory by default. This is sometimes 
  # insufficient. Rather than mock around with settings here, we just set the
  # IPC mode to use the host. Note that this is not recommended for production
  # environments due to security concerns, but it is useful for development.
  ipc: host

services:
  dev:
    # The main development environment container.
    # Inherits common settings from the base service anchor above.
    <<: *base-service

    build:
      # Build context is the pytorch Dockerfile directory
      context: ./services/pytorch/
      additional_contexts:
        # Allows referencing the project root in the Dockerfile
        workspace: .
      args:
        # Ensure the container user matches the host user for correct file permissions.
        # These are set in the .env file, which is initialized by script/bootstrap.
        UID: ${MY_UID}
        GID: ${MY_GID}

    # Mount the project root and data directory into the container.
    # This allows code and data changes on the host to be reflected in the container.
    volumes:
    # Mount the project root as /workspace (source code, scripts, etc)
    - .:/workspace:cached
    # Persist data across container restarts (models, cache, etc)
    - ./data:/data:cached

    # Set the working directory to where the workspace folder is mounted.
    working_dir: /workspace

    # Keep the container running (useful for VS Code dev containers, debugging, etc).
    command: tail -f /dev/null

    # Uncomment below to run jupyter lab on startup
    # command: jupyter lab --ip=0.0.0.0 --no-browser --NotebookApp.token='' --NotebookApp.password=''

    # Uncomment and edit to expose ports for Jupyter, TensorBoard, Gradio, etc.
    # ports:
    #   # Jupyter Labs
    #   - "8888:8888"
    #   # TensorBoard
    #   - "6006:6006"
    #   # Gradio
    #   - "7860:7860"

    # Enable GPU access for PyTorch (NVIDIA only).
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            # If you want to expose all GPUs, you can comment out the device_ids line.
            # Otherwise, specify the GPU IDs you want to use.
            # device_ids: ['0', '1']
            device_ids: ['0']
            capabilities: [gpu]
