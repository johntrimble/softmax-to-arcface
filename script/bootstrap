#!/usr/bin/env bash
set -e  # Exit immediately if a command exits with non-zero status

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
PROJECT_ROOT=$(dirname "$SCRIPT_DIR")
DOT_ENV_FILE="$PROJECT_ROOT/.env"

# Error handling function
error_exit() {
    echo "ERROR: $1" >&2
    exit 1
}

# Check for required tools
command -v docker >/dev/null 2>&1 || error_exit "Docker is not installed. Please install Docker first."
command -v docker compose >/dev/null 2>&1 || error_exit "Docker Compose is not installed. Please install Docker Compose first."

# Ensure docker compose is at least version 2.24.0
DOCKER_COMPOSE_VERSION=$(docker compose version --short 2>/dev/null || echo "0.0.0")
REQUIRED_VERSION="2.24.0"
if [[ "$(printf '%s\n' "$REQUIRED_VERSION" "$DOCKER_COMPOSE_VERSION" | sort -V | tail -n1)" != "$DOCKER_COMPOSE_VERSION" ]]; then
    error_exit "Docker Compose version must be at least $REQUIRED_VERSION. Current version: $DOCKER_COMPOSE_VERSION. Please update Docker Compose."
fi

# Check for NVIDIA drivers - bail if not available
if ! command -v nvidia-smi >/dev/null 2>&1; then
    error_exit "NVIDIA drivers not detected. This template requires GPU support."
fi

# Check if NVIDIA drivers are functioning properly
nvidia-smi >/dev/null 2>&1 || error_exit "NVIDIA drivers installed but not functioning properly."
echo "âœ… NVIDIA GPU detected"

# Create the .env file if it doesn't already exist
if [ ! -f "$DOT_ENV_FILE" ]; then
    echo "Creating .env file at $DOT_ENV_FILE"
    touch "$DOT_ENV_FILE" || error_exit "Failed to create .env file"
fi

# Add MY_UID to the .env file
if ! grep -q "MY_UID=" "$DOT_ENV_FILE"; then
    echo "MY_UID=$(id -u)" >> "$DOT_ENV_FILE" || error_exit "Failed to add MY_UID to .env"
    echo "MY_UID added to $DOT_ENV_FILE"
else
    sed -i "s/^MY_UID=.*/MY_UID=$(id -u)/" "$DOT_ENV_FILE" || error_exit "Failed to update MY_UID in .env"
    echo "MY_UID updated in $DOT_ENV_FILE"
fi

# Add MY_GID to the .env file
if ! grep -q "MY_GID=" "$DOT_ENV_FILE"; then
    echo "MY_GID=$(id -g)" >> "$DOT_ENV_FILE" || error_exit "Failed to add MY_GID to .env"
    echo "MY_GID added to $DOT_ENV_FILE"
else
    sed -i "s/^MY_GID=.*/MY_GID=$(id -g)/" "$DOT_ENV_FILE" || error_exit "Failed to update MY_GID in .env"
    echo "MY_GID updated in $DOT_ENV_FILE"
fi

# Create data and .cache directories if they do not exist
mkdir -p "$PROJECT_ROOT/data" || error_exit "Failed to create data directory"
mkdir -p "$PROJECT_ROOT/data/.cache" || error_exit "Failed to create cache directory"
